name: valves-e2c-analytics-service

on:
#   push:
#     branches: [ "branch2" ]

#   pull_request:
#     branches: [ "branch2" ]

  workflow_dispatch:
    inputs:
      Build_Type:
        type: choice
        description: "select the build type"
        required: true
        options:
          - Normal
          - Patch
      Release:
        default: "9"
        required: true
      AppVersion:
        default: "0"
        required: true
      Revision:
        default: ""
        required: false

env:
  Major: "1"
  Minor: "2"
  Build_Type: "Normal"
  Image_Build: "valves-e2c-analytics-service"
  Release: "${{ inputs.Release }}"
  AppVersion: "${{ inputs.AppVersion }}"
  Revision: "${{ inputs.Revision }}"
  Registry_Name: "ghcr.io/bh-ent-tech"
  patch: "0"

jobs:
  vars:
    runs-on: "ubuntu-latest"
    outputs:
      release: "${{ env.Release }}"
      appVersion: "${{ env.AppVersion }}"
      revision: "${{ env.Revision }}"
      build_Type: "${{ env.Build_Type }}"
      image_build: "${{ env.Image_Build }}"
      registry_name: "${{ env.Registry_Name }}"

    steps:
      - run: echo "Exposing env vars"

  create_image_name:
    runs-on: ubuntu-latest
    outputs:
      latest_image: ${{ steps.version_bump.outputs.image_name }}
    steps:
      - name: python package version bump
        id: version_bump
        run: |
          git config --global user.name 'github-actions'
          git config --global user.email 'github-actions@github.com'
          patch=0
          buildNumber=0
          if [ "$Build_Type" == "Normal" ]; then
            patch=0
            buildNumber=${{ github.run_number }}
              fi
          if [ "$Build_Type" == "Patch" ]; then
            patch= ${{ github.run_number }}
            buildNumber=$Revision
              fi
            echo "image_name=v$Release.$AppVersion.$patch.$buildNumber" >> $GITHUB_OUTPUT

  # Job for building and testing python microservices
  build-and-push:
    needs: [create_image_name, vars]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Set up Python 3.8
        uses: actions/setup-python@v3
        with:
          python-version: "3.8"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pytest
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GH_TOKEN }}


      - name: Build and push image to github container registry
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: ${{ needs.vars.outputs.registry_name }}/${{ needs.vars.outputs.image_build }}:${{ needs.create_image_name.outputs.latest_image }}

      # # Step 3: Build the Docker image
      # - name: Build Docker image
      #   run: |
      #     docker build -t ${{ needs.vars.outputs.registry_name }}/${{ needs.vars.outputs.image_build }}:${{ needs.create_image_name.outputs.latest_image }} .
      # # Step 4: Push the Docker image to GHCR
      # - name: Push Docker image
      #   run: |
      #     docker push ${{ needs.vars.outputs.registry_name }}/${{ needs.vars.outputs.image_build }}:${{ needs.create_image_name.outputs.latest_image }}
